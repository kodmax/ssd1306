import { convertBlock } from './convert-block'

describe('convert block', () => {

    it('bottom line', () => {
        const output = new Uint8Array(8)
        convertBlock(Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff]), output, 0)
        expect(output).toEqual(
            Uint8Array.from([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])
        )
    })

    it('top line', () => {
        const output = new Uint8Array(8)
        convertBlock(Uint8Array.from([0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), output, 0)
        expect(output).toEqual(
            Uint8Array.from([0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01])
        )
    })

    it('left line', () => {
        const output = new Uint8Array(8)
        convertBlock(Uint8Array.from([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]), output, 0)
        expect(output).toEqual(
            Uint8Array.from([0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])
        )
    })

    it('right line', () => {
        const output = new Uint8Array(8)
        convertBlock(Uint8Array.from([0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01]), output, 0)
        expect(output).toEqual(
            Uint8Array.from([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff])
        )
    })

    it('interlace', () => {
        const output = new Uint8Array(8)
        convertBlock(Uint8Array.from([0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00]), output, 0)
        expect(output).toEqual(
            Uint8Array.from([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55])
        )
    })
})

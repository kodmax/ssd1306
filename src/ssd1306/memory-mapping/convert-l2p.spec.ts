import { convertLinearToPages } from './convert-l2p'

let blocks: Uint8Array[] = []
jest.mock('./convert-block', () => {
    return {
        convertBlock: (input: Uint8Array): Uint8Array => {
            blocks.push(input.slice())
            return input
        }
    }
})

describe('conver-l2p', () => {
    describe('wide', () => {
        const content = Uint8Array.from([
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ])

        beforeEach(() => {
            blocks = []
            convertLinearToPages(128, 8, content)
        })

        it('left side empty', () => {
            expect(blocks[0]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[1]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[2]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[3]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[4]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[5]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[6]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[7]).toEqual(Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]))
        })

        it('right side with line', () => {
            expect(blocks[8]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[9]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[10]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[11]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[12]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[13]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[14]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
            expect(blocks[15]).toEqual(Uint8Array.from([0xff, 0, 0, 0, 0, 0, 0, 0]))
        })
    })

    describe('corners', () => {

        const content = Uint8Array.from([
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
            0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
            0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
            0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
            0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7
        ])

        beforeEach(() => {
            blocks = []
            convertLinearToPages(64, 16, content)
        })

        it('top left block', () => {
            expect(blocks[0]).toEqual(Uint8Array.from([
                0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70
            ]))
        })

        it('top right block', () => {
            expect(blocks[7]).toEqual(Uint8Array.from([
                0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77
            ]))
        })

        it('bottom left block', () => {
            expect(blocks[8]).toEqual(Uint8Array.from([
                0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0
            ]))
        })

        it('bottom right block', () => {
            expect(blocks[15]).toEqual(Uint8Array.from([
                0x87, 0x97, 0xa7, 0xb7, 0xc7, 0xd7, 0xe7, 0xf7
            ]))
        })
    })
})
